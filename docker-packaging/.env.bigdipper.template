# 北斗七星陣 MCP 團隊環境變數範本
# Big Dipper Formation Environment Configuration
# 複製此檔案為 .env 並填入您的配置

# ===========================================
# AI 提供者 API 金鑰（全域共享）
# ===========================================
# 至少需要設定一個 API 金鑰來啟用 AI 功能

# Anthropic Claude API（推薦）
ANTHROPIC_API_KEY=your_claude_api_key_here

# Perplexity AI API（研究功能必需）
PERPLEXITY_API_KEY=your_perplexity_api_key_here

# OpenAI API
OPENAI_API_KEY=your_openai_api_key_here

# Google Gemini API
GOOGLE_API_KEY=your_google_api_key_here

# XAI Grok API
XAI_API_KEY=your_xai_api_key_here

# OpenRouter API（多模型支援）
OPENROUTER_API_KEY=your_openrouter_api_key_here

# ===========================================
# 天樞星（Dubhe）- TaskMaster AI 配置
# ===========================================
TASKMASTER_TRANSPORT=stdio
# 傳輸模式: stdio, http

TASKMASTER_PORT=9120
# HTTP 模式端口

# ===========================================
# 天璇星（Merak）- Perplexity Custom 2.0 配置
# ===========================================
PERPLEXITY_TRANSPORT=stdio
# 傳輸模式: stdio, http, sse

PERPLEXITY_PORT=8080
# HTTP/SSE 模式端口

PERPLEXITY_MODEL=sonar-pro
# 模型選擇: sonar, sonar-pro, sonar-deep-research

# ===========================================
# 天璣星（Phecda）- Context7 Cached 配置
# ===========================================
CONTEXT7_TRANSPORT=stdio
# 傳輸模式: stdio, http

CONTEXT7_PORT=9119
# HTTP 模式端口

CONTEXT7_CACHE_ENABLED=true
# 啟用智能快取

# ===========================================
# 天權星（Megrez）- OpenMemory 配置
# ===========================================
# 注意：OpenMemory 使用獨立的配置
# 端口: 8765 (API), 3000 (Web UI), 6333 (Qdrant), 5432 (PostgreSQL)

# ===========================================
# 玉衡星（Alioth）- Zen MCP 配置
# ===========================================
ZEN_TRANSPORT=stdio
# 傳輸模式: stdio, http

ZEN_PORT=8082
# HTTP 模式端口

ZEN_DEFAULT_MODEL=pro
# 預設模型: flash, pro, o3, o3-mini, gemini-2.5-pro

ZEN_THINKING_MODE=medium
# 思考模式: minimal, low, medium, high, max

# ===========================================
# 開陽星（Mizar）- Serena 配置
# ===========================================
SERENA_TRANSPORT=stdio
# 傳輸模式: stdio, http, sse

SERENA_PORT=9121
# HTTP/SSE 模式端口

SERENA_CONTEXT=ide-assistant
# 運行上下文: ide-assistant, dev-assistant, code-review

PYLSP_ENABLED=true
# 啟用 Python Language Server

TSSERVER_ENABLED=true
# 啟用 TypeScript Language Server

PROJECT_PATH=./workspace
# 本地專案路徑（掛載到容器內進行代碼分析）

# ===========================================
# 瑤光星（Alkaid）- Sequential Thinking 配置
# ===========================================
SEQUENTIAL_TRANSPORT=stdio
# 傳輸模式: stdio, http

SEQUENTIAL_PORT=9122
# HTTP 模式端口

SEQUENTIAL_MAX_STEPS=50
# 最大思考步驟數

SEQUENTIAL_DEFAULT_MODE=medium
# 預設思維模式: simple, medium, complex, deep

# ===========================================
# 全域配置
# ===========================================
DEBUG=false
# 啟用除錯模式（影響所有服務）

TZ=Asia/Taipei
# 時區設定

# ===========================================
# 容器映像標籤
# ===========================================
TASKMASTER_IMAGE_TAG=latest
PERPLEXITY_IMAGE_TAG=latest
CONTEXT7_IMAGE_TAG=latest
ZEN_IMAGE_TAG=latest
SERENA_IMAGE_TAG=latest
SEQUENTIAL_IMAGE_TAG=latest

# ===========================================
# 資源配置建議
# ===========================================
# 最小系統需求：
# - CPU: 4 核心
# - 記憶體: 8GB
# - 磁碟空間: 20GB

# 推薦系統配置：
# - CPU: 8 核心
# - 記憶體: 16GB
# - 磁碟空間: 50GB

# 生產環境配置：
# - CPU: 16 核心
# - 記憶體: 32GB
# - 磁碟空間: 100GB

# ===========================================
# 端口對應總覽
# ===========================================
# TaskMaster AI:      9120
# Perplexity Custom:   8080
# Context7 Cached:     9119
# OpenMemory API:      8765
# OpenMemory Web UI:   3000
# Qdrant:             6333
# PostgreSQL:         5432
# Zen MCP:            8082
# Serena:             9121
# Serena Dashboard:   24282
# Sequential Thinking: 9122

# ===========================================
# 安全注意事項
# ===========================================
# 1. 請勿將此檔案提交到版本控制系統
# 2. 定期更換 API 金鑰
# 3. 在生產環境中使用強密碼
# 4. 考慮使用 Docker Secrets 管理敏感資訊
# 5. 定期更新容器映像以獲得安全修補程式

# ===========================================
# 故障排除
# ===========================================
# 如果遇到端口衝突，請調整相應的端口設定
# 如果服務啟動失敗，請檢查：
# 1. API 金鑰是否正確設定
# 2. 端口是否被其他服務占用
# 3. 系統資源是否充足
# 4. Docker 網路是否正確建立

# 使用說明：
# 1. 複製此檔案為 .env
# 2. 填入您的 API 金鑰
# 3. 根據需要調整配置
# 4. 執行: docker-compose -f docker-compose-bigdipper.yml up -d